import random
import time

# [The existing Personaje, Planeta, and GrafoAventura classes remain the same]

# Add new characters for the specific planet battles
nuevos_personajes = [
    Personaje("Yamcha", salud=200, poder_de_ataque=30, defensa=20, ataque_energia=50),
    Personaje("Maestro Roshi", salud=250, poder_de_ataque=40, defensa=25, ataque_energia=70),
    Personaje("Krilin", salud=300, poder_de_ataque=45, defensa=30, ataque_energia=80),
    Personaje("Piccolo", salud=500, poder_de_ataque=60, defensa=40, ataque_energia=100),
    Personaje("Dodoria", salud=450, poder_de_ataque=55, defensa=35, ataque_energia=90),
    Personaje("Freezer", salud=800, poder_de_ataque=100, defensa=60, ataque_energia=200),
    Personaje("Majin Buu", salud=1200, poder_de_ataque=120, defensa=80, ataque_energia=200),
    Personaje("Bills", salud=1500, poder_de_ataque=150, defensa=100, ataque_energia=250),
    Personaje("Whis", salud=1800, poder_de_ataque=180, defensa=120, ataque_energia=300),
    Personaje("Raditz", salud=350, poder_de_ataque=50, defensa=30, ataque_energia=100),
    Personaje("Broly", salud=1000, poder_de_ataque=120, defensa=70, ataque_energia=180),
    Personaje("Hit", salud=900, poder_de_ataque=100, defensa=70, ataque_energia=180),
    Personaje("Goku Black", salud=1100, poder_de_ataque=130, defensa=80, ataque_energia=220),
    Personaje("Jiren", salud=1600, poder_de_ataque=160, defensa=110, ataque_energia=280)
]

# Combine the original and new characters
personajes.extend(nuevos_personajes)

def modo_aventura(goku, personajes):
    # Rest of the function remains the same until the enemy generation part
    
    # Updated enemy dictionary for specific planets
    enemigos_por_planeta = {
        "Tierra": [
            next(p for p in personajes if p.nombre == "Yamcha"),
            next(p for p in personajes if p.nombre == "Maestro Roshi"),
            next(p for p in personajes if p.nombre == "Krilin")
        ],
        "Namek": [
            next(p for p in personajes if p.nombre == "Piccolo"),
            next(p for p in personajes if p.nombre == "Dodoria"),
            next(p for p in personajes if p.nombre == "Freezer")
        ],
        "Planeta de Bills": [
            next(p for p in personajes if p.nombre == "Majin Buu"),
            next(p for p in personajes if p.nombre == "Bills"),
            next(p for p in personajes if p.nombre == "Whis")
        ],
        "Planeta Vegeta": [
            next(p for p in personajes if p.nombre == "Raditz"),
            next(p for p in personajes if p.nombre == "Vegeta (Super Saiyan 4)"),
            next(p for p in personajes if p.nombre == "Broly")
        ],
        "Planeta Zeno": [
            next(p for p in personajes if p.nombre == "Hit"),
            next(p for p in personajes if p.nombre == "Goku Black"),
            next(p for p in personajes if p.nombre == "Jiren")
        ]
    }
    
    # Recorrer cada planeta en la ruta
    for planeta_nombre in ruta_planetas:
        planeta = universo.planetas[planeta_nombre]
        print(f"\n¡Llegando al planeta {planeta_nombre}!")
        print(f"Nivel de dificultad: {planeta.dificultad}/5")
        
        # Obtener los enemigos específicos para este planeta
        enemigos = enemigos_por_planeta.get(planeta_nombre, [])
        
        # Realizar las 3 batallas
        for i, enemigo in enumerate(enemigos, 1):
            print(f"\nBatalla {i} en {planeta_nombre}:")
            print(f"¡Goku vs {enemigo.nombre}!")
            input("Presiona ENTER para comenzar la batalla...")
            
            ganador = batalla(goku, enemigo)
            if ganador == enemigo:
                print("\n¡Game Over! Goku ha sido derrotado en su aventura.")
                return False
            
            # Restaurar parte de la salud después de cada batalla
            goku.salud = min(stats_originales["salud"], goku.salud + 100)
        
        # Resto del código permanece igual (aplicar beneficios del planeta, etc.)

    # Resto de la función queda igual
